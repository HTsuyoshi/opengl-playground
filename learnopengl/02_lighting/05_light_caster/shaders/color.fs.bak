#version 330 core

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct Light {
	vec3 direction;
	float cutoff;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;
in vec3 LightPos;

uniform Material material;
uniform Light light;

void main()
{
	// Point Light (Infinite)
	vec3 lightDir = normalize(LightPos - FragPos);
	//vec3 lightDir = normalize(light.position - FragPos);
	// Flashlight
	float theta = dot(lightDir, normalize(-light.direction));

	vec3 result;
	if (theta > light.cutoff)
	{
		vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb;
		// Directional Light
		//vec3 lightDir = normalize(-light.direction);
	
		vec3 norm = normalize(Normal);
		float diff = max(dot(norm, lightDir), 0.0);
		vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;

		vec3 viewDir = normalize(-FragPos);
		vec3 reflectDir = reflect(-lightDir, norm);
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
		vec3 specular = light.specular * spec * texture(material.specular, TexCoords).rgb;

		// Point Light
		float distance = length(LightPos - FragPos);
		float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

		// Point Light
		//ambient *= attenuation;
		diffuse *= attenuation;
		specular *= attenuation;

		result = ambient + diffuse + specular;
	}
	else
		result = light.ambient * vec3(texture(material.diffuse,  TexCoords));

	FragColor = vec4(result, 1.0);
}
